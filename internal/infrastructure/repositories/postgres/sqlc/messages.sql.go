// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (conversation_id, parent_id, role, content, model_id, token_count, cost, metadata)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, conversation_id, parent_id, role, content, model_id, token_count, cost, metadata, created_at, updated_at
`

type CreateMessageParams struct {
	ConversationID pgtype.UUID    `json:"conversation_id"`
	ParentID       pgtype.UUID    `json:"parent_id"`
	Role           string         `json:"role"`
	Content        pgtype.Text    `json:"content"`
	ModelID        pgtype.UUID    `json:"model_id"`
	TokenCount     pgtype.Int4    `json:"token_count"`
	Cost           pgtype.Numeric `json:"cost"`
	Metadata       []byte         `json:"metadata"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.ConversationID,
		arg.ParentID,
		arg.Role,
		arg.Content,
		arg.ModelID,
		arg.TokenCount,
		arg.Cost,
		arg.Metadata,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.ParentID,
		&i.Role,
		&i.Content,
		&i.ModelID,
		&i.TokenCount,
		&i.Cost,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages
WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteMessage, id)
	return err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, conversation_id, parent_id, role, content, model_id, token_count, cost, metadata, created_at, updated_at FROM messages
WHERE id = $1
`

func (q *Queries) GetMessageByID(ctx context.Context, id pgtype.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.ParentID,
		&i.Role,
		&i.Content,
		&i.ModelID,
		&i.TokenCount,
		&i.Cost,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMessageThread = `-- name: GetMessageThread :many
SELECT id, conversation_id, parent_id, role, content, model_id, token_count, cost, metadata, created_at, updated_at FROM messages
WHERE parent_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetMessageThread(ctx context.Context, parentID pgtype.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessageThread, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.ParentID,
			&i.Role,
			&i.Content,
			&i.ModelID,
			&i.TokenCount,
			&i.Cost,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByConversationID = `-- name: GetMessagesByConversationID :many
SELECT id, conversation_id, parent_id, role, content, model_id, token_count, cost, metadata, created_at, updated_at FROM messages
WHERE conversation_id = $1
ORDER BY created_at ASC
LIMIT $2 OFFSET $3
`

type GetMessagesByConversationIDParams struct {
	ConversationID pgtype.UUID `json:"conversation_id"`
	Limit          int32       `json:"limit"`
	Offset         int32       `json:"offset"`
}

func (q *Queries) GetMessagesByConversationID(ctx context.Context, arg GetMessagesByConversationIDParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByConversationID, arg.ConversationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.ParentID,
			&i.Role,
			&i.Content,
			&i.ModelID,
			&i.TokenCount,
			&i.Cost,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByConversationIDWithCursor = `-- name: GetMessagesByConversationIDWithCursor :many
SELECT id, conversation_id, parent_id, role, content, model_id, token_count, cost, metadata, created_at, updated_at FROM messages
WHERE conversation_id = $1 AND created_at < $2
ORDER BY created_at DESC
LIMIT $3
`

type GetMessagesByConversationIDWithCursorParams struct {
	ConversationID pgtype.UUID        `json:"conversation_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	Limit          int32              `json:"limit"`
}

func (q *Queries) GetMessagesByConversationIDWithCursor(ctx context.Context, arg GetMessagesByConversationIDWithCursorParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByConversationIDWithCursor, arg.ConversationID, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.ParentID,
			&i.Role,
			&i.Content,
			&i.ModelID,
			&i.TokenCount,
			&i.Cost,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages
SET
    content = $2,
    token_count = $3,
    cost = $4,
    metadata = $5
WHERE id = $1
RETURNING id, conversation_id, parent_id, role, content, model_id, token_count, cost, metadata, created_at, updated_at
`

type UpdateMessageParams struct {
	ID         pgtype.UUID    `json:"id"`
	Content    pgtype.Text    `json:"content"`
	TokenCount pgtype.Int4    `json:"token_count"`
	Cost       pgtype.Numeric `json:"cost"`
	Metadata   []byte         `json:"metadata"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, updateMessage,
		arg.ID,
		arg.Content,
		arg.TokenCount,
		arg.Cost,
		arg.Metadata,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.ParentID,
		&i.Role,
		&i.Content,
		&i.ModelID,
		&i.TokenCount,
		&i.Cost,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
