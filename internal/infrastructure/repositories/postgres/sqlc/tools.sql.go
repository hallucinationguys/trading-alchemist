// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tools.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTool = `-- name: CreateTool :one
INSERT INTO tools (name, description, schema, provider_id, is_active)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, schema, provider_id, is_active, created_at, updated_at
`

type CreateToolParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Schema      []byte      `json:"schema"`
	ProviderID  pgtype.UUID `json:"provider_id"`
	IsActive    pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateTool(ctx context.Context, arg CreateToolParams) (Tool, error) {
	row := q.db.QueryRow(ctx, createTool,
		arg.Name,
		arg.Description,
		arg.Schema,
		arg.ProviderID,
		arg.IsActive,
	)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Schema,
		&i.ProviderID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTool = `-- name: DeleteTool :exec
DELETE FROM tools
WHERE id = $1
`

func (q *Queries) DeleteTool(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTool, id)
	return err
}

const getAvailableTools = `-- name: GetAvailableTools :many
SELECT id, name, description, schema, provider_id, is_active, created_at, updated_at FROM tools
WHERE is_active = true AND (provider_id IS NULL OR provider_id = $1)
ORDER BY name
`

func (q *Queries) GetAvailableTools(ctx context.Context, providerID pgtype.UUID) ([]Tool, error) {
	rows, err := q.db.Query(ctx, getAvailableTools, providerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tool{}
	for rows.Next() {
		var i Tool
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Schema,
			&i.ProviderID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getToolByID = `-- name: GetToolByID :one
SELECT id, name, description, schema, provider_id, is_active, created_at, updated_at FROM tools
WHERE id = $1
`

func (q *Queries) GetToolByID(ctx context.Context, id pgtype.UUID) (Tool, error) {
	row := q.db.QueryRow(ctx, getToolByID, id)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Schema,
		&i.ProviderID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getToolByName = `-- name: GetToolByName :one
SELECT id, name, description, schema, provider_id, is_active, created_at, updated_at FROM tools
WHERE name = $1
`

func (q *Queries) GetToolByName(ctx context.Context, name string) (Tool, error) {
	row := q.db.QueryRow(ctx, getToolByName, name)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Schema,
		&i.ProviderID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const logToolUsage = `-- name: LogToolUsage :one
INSERT INTO message_tools (message_id, tool_id, input, output, executed_at, duration, success, error)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, message_id, tool_id, input, output, executed_at, duration, success, error
`

type LogToolUsageParams struct {
	MessageID  pgtype.UUID        `json:"message_id"`
	ToolID     pgtype.UUID        `json:"tool_id"`
	Input      []byte             `json:"input"`
	Output     []byte             `json:"output"`
	ExecutedAt pgtype.Timestamptz `json:"executed_at"`
	Duration   pgtype.Int8        `json:"duration"`
	Success    pgtype.Bool        `json:"success"`
	Error      pgtype.Text        `json:"error"`
}

func (q *Queries) LogToolUsage(ctx context.Context, arg LogToolUsageParams) (MessageTool, error) {
	row := q.db.QueryRow(ctx, logToolUsage,
		arg.MessageID,
		arg.ToolID,
		arg.Input,
		arg.Output,
		arg.ExecutedAt,
		arg.Duration,
		arg.Success,
		arg.Error,
	)
	var i MessageTool
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.ToolID,
		&i.Input,
		&i.Output,
		&i.ExecutedAt,
		&i.Duration,
		&i.Success,
		&i.Error,
	)
	return i, err
}

const updateTool = `-- name: UpdateTool :one
UPDATE tools
SET
    description = $2,
    schema = $3,
    provider_id = $4,
    is_active = $5
WHERE id = $1
RETURNING id, name, description, schema, provider_id, is_active, created_at, updated_at
`

type UpdateToolParams struct {
	ID          pgtype.UUID `json:"id"`
	Description pgtype.Text `json:"description"`
	Schema      []byte      `json:"schema"`
	ProviderID  pgtype.UUID `json:"provider_id"`
	IsActive    pgtype.Bool `json:"is_active"`
}

func (q *Queries) UpdateTool(ctx context.Context, arg UpdateToolParams) (Tool, error) {
	row := q.db.QueryRow(ctx, updateTool,
		arg.ID,
		arg.Description,
		arg.Schema,
		arg.ProviderID,
		arg.IsActive,
	)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Schema,
		&i.ProviderID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
