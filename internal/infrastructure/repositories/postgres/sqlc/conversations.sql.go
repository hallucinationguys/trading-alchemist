// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: conversations.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const archiveConversation = `-- name: ArchiveConversation :exec
UPDATE conversations
SET is_archived = true
WHERE id = $1
`

func (q *Queries) ArchiveConversation(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, archiveConversation, id)
	return err
}

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations (user_id, title, model_id, system_prompt, settings)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, title, model_id, system_prompt, settings, is_archived, created_at, updated_at, last_message_at
`

type CreateConversationParams struct {
	UserID       pgtype.UUID `json:"user_id"`
	Title        string      `json:"title"`
	ModelID      pgtype.UUID `json:"model_id"`
	SystemPrompt pgtype.Text `json:"system_prompt"`
	Settings     []byte      `json:"settings"`
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRow(ctx, createConversation,
		arg.UserID,
		arg.Title,
		arg.ModelID,
		arg.SystemPrompt,
		arg.Settings,
	)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.ModelID,
		&i.SystemPrompt,
		&i.Settings,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastMessageAt,
	)
	return i, err
}

const deleteConversation = `-- name: DeleteConversation :exec
DELETE FROM conversations
WHERE id = $1
`

func (q *Queries) DeleteConversation(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteConversation, id)
	return err
}

const getConversationByID = `-- name: GetConversationByID :one
SELECT id, user_id, title, model_id, system_prompt, settings, is_archived, created_at, updated_at, last_message_at FROM conversations
WHERE id = $1
`

func (q *Queries) GetConversationByID(ctx context.Context, id pgtype.UUID) (Conversation, error) {
	row := q.db.QueryRow(ctx, getConversationByID, id)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.ModelID,
		&i.SystemPrompt,
		&i.Settings,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastMessageAt,
	)
	return i, err
}

const getConversationsByUserID = `-- name: GetConversationsByUserID :many
SELECT id, user_id, title, model_id, system_prompt, settings, is_archived, created_at, updated_at, last_message_at FROM conversations
WHERE user_id = $1 AND is_archived = false
ORDER BY last_message_at DESC NULLS LAST, created_at DESC
LIMIT $2 OFFSET $3
`

type GetConversationsByUserIDParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetConversationsByUserID(ctx context.Context, arg GetConversationsByUserIDParams) ([]Conversation, error) {
	rows, err := q.db.Query(ctx, getConversationsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Conversation{}
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.ModelID,
			&i.SystemPrompt,
			&i.Settings,
			&i.IsArchived,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastMessageAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConversation = `-- name: UpdateConversation :one
UPDATE conversations
SET
    title = $2,
    model_id = $3,
    system_prompt = $4,
    settings = $5
WHERE id = $1
RETURNING id, user_id, title, model_id, system_prompt, settings, is_archived, created_at, updated_at, last_message_at
`

type UpdateConversationParams struct {
	ID           pgtype.UUID `json:"id"`
	Title        string      `json:"title"`
	ModelID      pgtype.UUID `json:"model_id"`
	SystemPrompt pgtype.Text `json:"system_prompt"`
	Settings     []byte      `json:"settings"`
}

func (q *Queries) UpdateConversation(ctx context.Context, arg UpdateConversationParams) (Conversation, error) {
	row := q.db.QueryRow(ctx, updateConversation,
		arg.ID,
		arg.Title,
		arg.ModelID,
		arg.SystemPrompt,
		arg.Settings,
	)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.ModelID,
		&i.SystemPrompt,
		&i.Settings,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastMessageAt,
	)
	return i, err
}

const updateConversationLastMessageAt = `-- name: UpdateConversationLastMessageAt :exec
UPDATE conversations
SET last_message_at = $2
WHERE id = $1
`

type UpdateConversationLastMessageAtParams struct {
	ID            pgtype.UUID        `json:"id"`
	LastMessageAt pgtype.Timestamptz `json:"last_message_at"`
}

func (q *Queries) UpdateConversationLastMessageAt(ctx context.Context, arg UpdateConversationLastMessageAtParams) error {
	_, err := q.db.Exec(ctx, updateConversationLastMessageAt, arg.ID, arg.LastMessageAt)
	return err
}
