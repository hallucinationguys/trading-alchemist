// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: artifacts.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArtifact = `-- name: CreateArtifact :one
INSERT INTO artifacts (message_id, title, type, language, content, content_hash, size, is_public)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, message_id, title, type, language, content, content_hash, size, is_public, created_at, updated_at
`

type CreateArtifactParams struct {
	MessageID   pgtype.UUID `json:"message_id"`
	Title       string      `json:"title"`
	Type        string      `json:"type"`
	Language    pgtype.Text `json:"language"`
	Content     pgtype.Text `json:"content"`
	ContentHash pgtype.Text `json:"content_hash"`
	Size        pgtype.Int8 `json:"size"`
	IsPublic    pgtype.Bool `json:"is_public"`
}

func (q *Queries) CreateArtifact(ctx context.Context, arg CreateArtifactParams) (Artifact, error) {
	row := q.db.QueryRow(ctx, createArtifact,
		arg.MessageID,
		arg.Title,
		arg.Type,
		arg.Language,
		arg.Content,
		arg.ContentHash,
		arg.Size,
		arg.IsPublic,
	)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Title,
		&i.Type,
		&i.Language,
		&i.Content,
		&i.ContentHash,
		&i.Size,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteArtifact = `-- name: DeleteArtifact :exec
DELETE FROM artifacts
WHERE id = $1
`

func (q *Queries) DeleteArtifact(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteArtifact, id)
	return err
}

const getArtifactByID = `-- name: GetArtifactByID :one
SELECT id, message_id, title, type, language, content, content_hash, size, is_public, created_at, updated_at FROM artifacts
WHERE id = $1
`

func (q *Queries) GetArtifactByID(ctx context.Context, id pgtype.UUID) (Artifact, error) {
	row := q.db.QueryRow(ctx, getArtifactByID, id)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Title,
		&i.Type,
		&i.Language,
		&i.Content,
		&i.ContentHash,
		&i.Size,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArtifactsByMessageID = `-- name: GetArtifactsByMessageID :many
SELECT id, message_id, title, type, language, content, content_hash, size, is_public, created_at, updated_at FROM artifacts
WHERE message_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetArtifactsByMessageID(ctx context.Context, messageID pgtype.UUID) ([]Artifact, error) {
	rows, err := q.db.Query(ctx, getArtifactsByMessageID, messageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Artifact{}
	for rows.Next() {
		var i Artifact
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Title,
			&i.Type,
			&i.Language,
			&i.Content,
			&i.ContentHash,
			&i.Size,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicArtifacts = `-- name: GetPublicArtifacts :many
SELECT id, message_id, title, type, language, content, content_hash, size, is_public, created_at, updated_at FROM artifacts
WHERE is_public = true
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetPublicArtifactsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPublicArtifacts(ctx context.Context, arg GetPublicArtifactsParams) ([]Artifact, error) {
	rows, err := q.db.Query(ctx, getPublicArtifacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Artifact{}
	for rows.Next() {
		var i Artifact
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Title,
			&i.Type,
			&i.Language,
			&i.Content,
			&i.ContentHash,
			&i.Size,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArtifact = `-- name: UpdateArtifact :one
UPDATE artifacts
SET
    title = $2,
    content = $3,
    content_hash = $4,
    size = $5,
    is_public = $6
WHERE id = $1
RETURNING id, message_id, title, type, language, content, content_hash, size, is_public, created_at, updated_at
`

type UpdateArtifactParams struct {
	ID          pgtype.UUID `json:"id"`
	Title       string      `json:"title"`
	Content     pgtype.Text `json:"content"`
	ContentHash pgtype.Text `json:"content_hash"`
	Size        pgtype.Int8 `json:"size"`
	IsPublic    pgtype.Bool `json:"is_public"`
}

func (q *Queries) UpdateArtifact(ctx context.Context, arg UpdateArtifactParams) (Artifact, error) {
	row := q.db.QueryRow(ctx, updateArtifact,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.ContentHash,
		arg.Size,
		arg.IsPublic,
	)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Title,
		&i.Type,
		&i.Language,
		&i.Content,
		&i.ContentHash,
		&i.Size,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
