// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: models.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createModel = `-- name: CreateModel :one
INSERT INTO models (
    provider_id, name, display_name, supports_functions, supports_vision, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, provider_id, name, display_name, supports_functions, supports_vision, is_active, created_at, updated_at
`

type CreateModelParams struct {
	ProviderID        pgtype.UUID `json:"provider_id"`
	Name              string      `json:"name"`
	DisplayName       string      `json:"display_name"`
	SupportsFunctions pgtype.Bool `json:"supports_functions"`
	SupportsVision    pgtype.Bool `json:"supports_vision"`
	IsActive          pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateModel(ctx context.Context, arg CreateModelParams) (Model, error) {
	row := q.db.QueryRow(ctx, createModel,
		arg.ProviderID,
		arg.Name,
		arg.DisplayName,
		arg.SupportsFunctions,
		arg.SupportsVision,
		arg.IsActive,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.Name,
		&i.DisplayName,
		&i.SupportsFunctions,
		&i.SupportsVision,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteModel = `-- name: DeleteModel :exec
DELETE FROM models
WHERE id = $1
`

func (q *Queries) DeleteModel(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteModel, id)
	return err
}

const getActiveModelsByProviderID = `-- name: GetActiveModelsByProviderID :many
SELECT id, provider_id, name, display_name, supports_functions, supports_vision, is_active, created_at, updated_at FROM models
WHERE provider_id = $1 AND is_active = TRUE
ORDER BY name
`

func (q *Queries) GetActiveModelsByProviderID(ctx context.Context, providerID pgtype.UUID) ([]Model, error) {
	rows, err := q.db.Query(ctx, getActiveModelsByProviderID, providerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Model{}
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.Name,
			&i.DisplayName,
			&i.SupportsFunctions,
			&i.SupportsVision,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getModelByID = `-- name: GetModelByID :one
SELECT id, provider_id, name, display_name, supports_functions, supports_vision, is_active, created_at, updated_at FROM models
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetModelByID(ctx context.Context, id pgtype.UUID) (Model, error) {
	row := q.db.QueryRow(ctx, getModelByID, id)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.Name,
		&i.DisplayName,
		&i.SupportsFunctions,
		&i.SupportsVision,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getModelByName = `-- name: GetModelByName :one
SELECT id, provider_id, name, display_name, supports_functions, supports_vision, is_active, created_at, updated_at FROM models
WHERE provider_id = $1 AND name = $2
LIMIT 1
`

type GetModelByNameParams struct {
	ProviderID pgtype.UUID `json:"provider_id"`
	Name       string      `json:"name"`
}

func (q *Queries) GetModelByName(ctx context.Context, arg GetModelByNameParams) (Model, error) {
	row := q.db.QueryRow(ctx, getModelByName, arg.ProviderID, arg.Name)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.Name,
		&i.DisplayName,
		&i.SupportsFunctions,
		&i.SupportsVision,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getModelsByProviderID = `-- name: GetModelsByProviderID :many
SELECT id, provider_id, name, display_name, supports_functions, supports_vision, is_active, created_at, updated_at FROM models
WHERE provider_id = $1
ORDER BY display_name
`

func (q *Queries) GetModelsByProviderID(ctx context.Context, providerID pgtype.UUID) ([]Model, error) {
	rows, err := q.db.Query(ctx, getModelsByProviderID, providerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Model{}
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.Name,
			&i.DisplayName,
			&i.SupportsFunctions,
			&i.SupportsVision,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateModel = `-- name: UpdateModel :one
UPDATE models
SET
    display_name = $2,
    supports_functions = $3,
    supports_vision = $4,
    is_active = $5
WHERE id = $1
RETURNING id, provider_id, name, display_name, supports_functions, supports_vision, is_active, created_at, updated_at
`

type UpdateModelParams struct {
	ID                pgtype.UUID `json:"id"`
	DisplayName       string      `json:"display_name"`
	SupportsFunctions pgtype.Bool `json:"supports_functions"`
	SupportsVision    pgtype.Bool `json:"supports_vision"`
	IsActive          pgtype.Bool `json:"is_active"`
}

func (q *Queries) UpdateModel(ctx context.Context, arg UpdateModelParams) (Model, error) {
	row := q.db.QueryRow(ctx, updateModel,
		arg.ID,
		arg.DisplayName,
		arg.SupportsFunctions,
		arg.SupportsVision,
		arg.IsActive,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.Name,
		&i.DisplayName,
		&i.SupportsFunctions,
		&i.SupportsVision,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
