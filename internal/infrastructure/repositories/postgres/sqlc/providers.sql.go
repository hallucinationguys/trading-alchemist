// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: providers.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProvider = `-- name: CreateProvider :one
INSERT INTO providers (name, display_name, is_active)
VALUES ($1, $2, $3)
RETURNING id, name, display_name, is_active, created_at, updated_at
`

type CreateProviderParams struct {
	Name        string      `json:"name"`
	DisplayName string      `json:"display_name"`
	IsActive    pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (Provider, error) {
	row := q.db.QueryRow(ctx, createProvider, arg.Name, arg.DisplayName, arg.IsActive)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProvider = `-- name: DeleteProvider :exec
DELETE FROM providers
WHERE id = $1
`

func (q *Queries) DeleteProvider(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProvider, id)
	return err
}

const getActiveProviders = `-- name: GetActiveProviders :many
SELECT id, name, display_name, is_active, created_at, updated_at
FROM providers
WHERE is_active = TRUE
ORDER BY display_name
`

func (q *Queries) GetActiveProviders(ctx context.Context) ([]Provider, error) {
	rows, err := q.db.Query(ctx, getActiveProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Provider{}
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DisplayName,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProviders = `-- name: GetAllProviders :many
SELECT id, name, display_name, is_active, created_at, updated_at
FROM providers
ORDER BY display_name
`

func (q *Queries) GetAllProviders(ctx context.Context) ([]Provider, error) {
	rows, err := q.db.Query(ctx, getAllProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Provider{}
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DisplayName,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvailableModelsForUser = `-- name: GetAvailableModelsForUser :many
SELECT 
    p.id as provider_id,
    p.name as provider_name,
    p.display_name as provider_display_name,
    m.id as model_id,
    m.name as model_name,
    m.display_name as model_display_name,
    m.supports_functions as model_supports_functions,
    m.supports_vision as model_supports_vision,
    ups.id as setting_id,
    ups.encrypted_api_key as has_api_key,
    ups.is_active as setting_is_active
FROM providers p
INNER JOIN models m ON p.id = m.provider_id AND m.is_active = TRUE
LEFT JOIN user_provider_settings ups ON p.id = ups.provider_id AND ups.user_id = $1
WHERE p.is_active = TRUE
ORDER BY 
    CASE WHEN ups.encrypted_api_key IS NOT NULL AND ups.is_active = TRUE THEN 0 ELSE 1 END,
    p.display_name,
    m.display_name
`

type GetAvailableModelsForUserRow struct {
	ProviderID             pgtype.UUID `json:"provider_id"`
	ProviderName           string      `json:"provider_name"`
	ProviderDisplayName    string      `json:"provider_display_name"`
	ModelID                pgtype.UUID `json:"model_id"`
	ModelName              string      `json:"model_name"`
	ModelDisplayName       string      `json:"model_display_name"`
	ModelSupportsFunctions pgtype.Bool `json:"model_supports_functions"`
	ModelSupportsVision    pgtype.Bool `json:"model_supports_vision"`
	SettingID              pgtype.UUID `json:"setting_id"`
	HasApiKey              pgtype.Text `json:"has_api_key"`
	SettingIsActive        pgtype.Bool `json:"setting_is_active"`
}

func (q *Queries) GetAvailableModelsForUser(ctx context.Context, userID pgtype.UUID) ([]GetAvailableModelsForUserRow, error) {
	rows, err := q.db.Query(ctx, getAvailableModelsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAvailableModelsForUserRow{}
	for rows.Next() {
		var i GetAvailableModelsForUserRow
		if err := rows.Scan(
			&i.ProviderID,
			&i.ProviderName,
			&i.ProviderDisplayName,
			&i.ModelID,
			&i.ModelName,
			&i.ModelDisplayName,
			&i.ModelSupportsFunctions,
			&i.ModelSupportsVision,
			&i.SettingID,
			&i.HasApiKey,
			&i.SettingIsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProviderByID = `-- name: GetProviderByID :one
SELECT id, name, display_name, is_active, created_at, updated_at
FROM providers
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProviderByID(ctx context.Context, id pgtype.UUID) (Provider, error) {
	row := q.db.QueryRow(ctx, getProviderByID, id)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProviderByName = `-- name: GetProviderByName :one
SELECT id, name, display_name, is_active, created_at, updated_at
FROM providers
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetProviderByName(ctx context.Context, name string) (Provider, error) {
	row := q.db.QueryRow(ctx, getProviderByName, name)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProvidersWithModels = `-- name: GetProvidersWithModels :many
SELECT 
    p.id as provider_id,
    p.name as provider_name,
    p.display_name as provider_display_name,
    p.is_active as provider_is_active,
    p.created_at as provider_created_at,
    p.updated_at as provider_updated_at,
    m.id as model_id,
    m.name as model_name,
    m.display_name as model_display_name,
    m.supports_functions as model_supports_functions,
    m.supports_vision as model_supports_vision,
    m.is_active as model_is_active,
    m.created_at as model_created_at,
    m.updated_at as model_updated_at
FROM providers p
LEFT JOIN models m ON p.id = m.provider_id AND m.is_active = TRUE
WHERE p.is_active = TRUE
ORDER BY p.display_name, m.display_name
`

type GetProvidersWithModelsRow struct {
	ProviderID             pgtype.UUID        `json:"provider_id"`
	ProviderName           string             `json:"provider_name"`
	ProviderDisplayName    string             `json:"provider_display_name"`
	ProviderIsActive       pgtype.Bool        `json:"provider_is_active"`
	ProviderCreatedAt      pgtype.Timestamptz `json:"provider_created_at"`
	ProviderUpdatedAt      pgtype.Timestamptz `json:"provider_updated_at"`
	ModelID                pgtype.UUID        `json:"model_id"`
	ModelName              pgtype.Text        `json:"model_name"`
	ModelDisplayName       pgtype.Text        `json:"model_display_name"`
	ModelSupportsFunctions pgtype.Bool        `json:"model_supports_functions"`
	ModelSupportsVision    pgtype.Bool        `json:"model_supports_vision"`
	ModelIsActive          pgtype.Bool        `json:"model_is_active"`
	ModelCreatedAt         pgtype.Timestamptz `json:"model_created_at"`
	ModelUpdatedAt         pgtype.Timestamptz `json:"model_updated_at"`
}

func (q *Queries) GetProvidersWithModels(ctx context.Context) ([]GetProvidersWithModelsRow, error) {
	rows, err := q.db.Query(ctx, getProvidersWithModels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProvidersWithModelsRow{}
	for rows.Next() {
		var i GetProvidersWithModelsRow
		if err := rows.Scan(
			&i.ProviderID,
			&i.ProviderName,
			&i.ProviderDisplayName,
			&i.ProviderIsActive,
			&i.ProviderCreatedAt,
			&i.ProviderUpdatedAt,
			&i.ModelID,
			&i.ModelName,
			&i.ModelDisplayName,
			&i.ModelSupportsFunctions,
			&i.ModelSupportsVision,
			&i.ModelIsActive,
			&i.ModelCreatedAt,
			&i.ModelUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProvider = `-- name: UpdateProvider :one
UPDATE providers
SET
    display_name = $2,
    is_active = $3
WHERE id = $1
RETURNING id, name, display_name, is_active, created_at, updated_at
`

type UpdateProviderParams struct {
	ID          pgtype.UUID `json:"id"`
	DisplayName string      `json:"display_name"`
	IsActive    pgtype.Bool `json:"is_active"`
}

func (q *Queries) UpdateProvider(ctx context.Context, arg UpdateProviderParams) (Provider, error) {
	row := q.db.QueryRow(ctx, updateProvider, arg.ID, arg.DisplayName, arg.IsActive)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
