// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, first_name, last_name, email_verified)
VALUES ($1, $2, $3, $4)
RETURNING id, email, email_verified, first_name, last_name, avatar_url, is_active, created_at, updated_at
`

type CreateUserParams struct {
	Email         string      `json:"email"`
	FirstName     pgtype.Text `json:"first_name"`
	LastName      pgtype.Text `json:"last_name"`
	EmailVerified pgtype.Bool `json:"email_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.EmailVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.AvatarUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users 
SET is_active = false, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, email_verified, first_name, last_name, avatar_url, is_active, created_at, updated_at FROM users 
WHERE email = $1 AND is_active = true
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.AvatarUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, email_verified, first_name, last_name, avatar_url, is_active, created_at, updated_at FROM users 
WHERE id = $1 AND is_active = true
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.AvatarUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET first_name = $2, last_name = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, email, email_verified, first_name, last_name, avatar_url, is_active, created_at, updated_at
`

type UpdateUserParams struct {
	ID        pgtype.UUID `json:"id"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.FirstName, arg.LastName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.AvatarUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyUserEmail = `-- name: VerifyUserEmail :one
UPDATE users 
SET email_verified = true, updated_at = NOW()
WHERE id = $1
RETURNING id, email, email_verified, first_name, last_name, avatar_url, is_active, created_at, updated_at
`

func (q *Queries) VerifyUserEmail(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, verifyUserEmail, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.AvatarUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
