{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A modern Go-based authentication system with magic link functionality using Clean Architecture principles.\nThis API provides secure authentication mechanisms including magic link authentication, JWT token management, and user profile management.",
        "title": "Trading Alchemist API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Trading Alchemist Team",
            "email": "team@tradingalchemist.dev"
        },
        "license": {
            "name": "MIT",
            "url": "http://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/auth/magic-link": {
            "post": {
                "description": "Sends a magic link to the specified email address for passwordless authentication. The magic link will be valid for the configured TTL period (default 15 minutes).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Send magic link",
                "parameters": [
                    {
                        "description": "Email address to send magic link to",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_application_dto.SendMagicLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Magic link sent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/trading-alchemist_internal_application_dto.SendMagicLinkResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid email address or validation error",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too many requests - rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/verify": {
            "post": {
                "description": "Verifies a magic link token and returns JWT access token if valid. The magic link token is consumed and cannot be used again.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify magic link",
                "parameters": [
                    {
                        "description": "Magic link token to verify",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_application_dto.VerifyMagicLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Magic link verified successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/trading-alchemist_internal_application_dto.VerifyMagicLinkResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid token format",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid, expired, or already used token",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the current health status of the API. This endpoint can be used for monitoring and load balancer health checks.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/internal_presentation_http_handlers.HealthResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service is unhealthy",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/profile": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves the profile information for the currently authenticated user. Requires valid JWT token in Authorization header.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/trading-alchemist_internal_application_dto.GetUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the profile information for the currently authenticated user. Only provided fields will be updated (partial update).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "User profile information to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_application_dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/trading-alchemist_internal_application_dto.UpdateUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request data or validation error",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "internal_presentation_http_handlers.HealthResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Service status\nexample: ok",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Current timestamp\nexample: 2023-12-01T10:00:00Z",
                    "type": "string"
                },
                "uptime": {
                    "description": "Service uptime (optional)\nexample: 24h30m",
                    "type": "string"
                },
                "version": {
                    "description": "API version\nexample: 1.0.0",
                    "type": "string"
                }
            }
        },
        "trading-alchemist_internal_application_dto.GetUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "description": "User information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/trading-alchemist_internal_application_dto.UserResponse"
                        }
                    ]
                }
            }
        },
        "trading-alchemist_internal_application_dto.SendMagicLinkRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Email address to send the magic link to\nrequired: true\nexample: user@example.com",
                    "type": "string"
                },
                "purpose": {
                    "description": "Purpose of the magic link (login, email_verification, password_reset)\nexample: login",
                    "type": "string"
                }
            }
        },
        "trading-alchemist_internal_application_dto.SendMagicLinkResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Response message\nexample: If this email is registered, a magic link has been sent",
                    "type": "string"
                },
                "sent": {
                    "description": "Whether the email was sent successfully\nexample: true",
                    "type": "boolean"
                }
            }
        },
        "trading-alchemist_internal_application_dto.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "description": "Avatar URL\nexample: https://example.com/avatar.jpg",
                    "type": "string"
                },
                "first_name": {
                    "description": "First name (1-100 characters)\nexample: John",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "last_name": {
                    "description": "Last name (1-100 characters)\nexample: Doe",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "trading-alchemist_internal_application_dto.UpdateUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "description": "Updated user information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/trading-alchemist_internal_application_dto.UserResponse"
                        }
                    ]
                }
            }
        },
        "trading-alchemist_internal_application_dto.UserResponse": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "description": "Avatar URL\nexample: https://example.com/avatar.jpg",
                    "type": "string"
                },
                "created_at": {
                    "description": "Account creation timestamp\nexample: 2023-12-01T10:00:00Z",
                    "type": "string"
                },
                "display_name": {
                    "description": "Display name\nexample: John Doe",
                    "type": "string"
                },
                "email": {
                    "description": "Email address\nexample: user@example.com",
                    "type": "string"
                },
                "email_verified": {
                    "description": "Whether email is verified\nexample: true",
                    "type": "boolean"
                },
                "first_name": {
                    "description": "First name\nexample: John",
                    "type": "string"
                },
                "full_name": {
                    "description": "Full name (computed from first and last name)\nexample: John Doe",
                    "type": "string"
                },
                "id": {
                    "description": "User ID\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                },
                "is_active": {
                    "description": "Whether user is active\nexample: true",
                    "type": "boolean"
                },
                "last_name": {
                    "description": "Last name\nexample: Doe",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Last update timestamp\nexample: 2023-12-01T10:00:00Z",
                    "type": "string"
                }
            }
        },
        "trading-alchemist_internal_application_dto.VerifyMagicLinkRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "description": "Magic link token to verify\nrequired: true\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string"
                }
            }
        },
        "trading-alchemist_internal_application_dto.VerifyMagicLinkResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "JWT access token\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string"
                },
                "expires_in": {
                    "description": "Token expiration in seconds\nexample: 86400",
                    "type": "integer"
                },
                "token_type": {
                    "description": "Token type\nexample: Bearer",
                    "type": "string"
                },
                "user": {
                    "description": "User information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/trading-alchemist_internal_application_dto.UserResponse"
                        }
                    ]
                }
            }
        },
        "trading-alchemist_internal_presentation_responses.ErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code\nexample: VALIDATION_ERROR",
                    "type": "string"
                },
                "details": {
                    "description": "Optional error details\nexample: The email field must be a valid email address",
                    "type": "string"
                },
                "message": {
                    "description": "Error message\nexample: Invalid email address",
                    "type": "string"
                }
            }
        },
        "trading-alchemist_internal_presentation_responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/trading-alchemist_internal_presentation_responses.ErrorDetail"
                        }
                    ]
                },
                "success": {
                    "description": "Success indicator (always false for errors)\nexample: false",
                    "type": "boolean"
                }
            }
        },
        "trading-alchemist_internal_presentation_responses.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Response data"
                },
                "message": {
                    "description": "Optional success message\nexample: Operation completed successfully",
                    "type": "string"
                },
                "success": {
                    "description": "Success indicator\nexample: true",
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "JWT token. Usage: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}